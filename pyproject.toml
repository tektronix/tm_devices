[build-system]
build-backend = "poetry.core.masonry.api"
requires = ["poetry-core>=1.0.0"]

[tool]

[tool.coverage.coverage_conditional_plugin.rules]
py-gte-39 = "sys_version_info >= (3, 9)"
py-lt-39 = "sys_version_info < (3, 9)"

[tool.coverage.report]
exclude_lines = [
  "if TYPE_CHECKING:",
  "pragma: no cover",
  "raise NotImplementedError"
]
fail_under = 100
omit = [
  "**/tm_devices/commands/**"  # TODO: remove this exclusion
]
show_missing = true
skip_empty = true

[tool.coverage.run]
branch = true
cover_pylib = false
plugins = ["coverage_conditional_plugin"]
source = ["tm_devices"]

[tool.docformatter]
close-quotes-on-newline = true
in-place = true
recursive = true
wrap-descriptions = 100
wrap-summaries = 0

[tool.poetry]
authors = [
  "Tektronix <opensource@tektronix.com>",
  "Nicholas Felt <nicholas.felt@tektronix.com>"
]
classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Intended Audience :: Developers",
  "Intended Audience :: Science/Research",
  "Operating System :: OS Independent",
  "Topic :: Scientific/Engineering :: Interface Engine/Protocol Translator",
  "Topic :: Scientific/Engineering",
  "Topic :: System :: Hardware :: Hardware Drivers"
]
description = "Manage connections and interactions with Test & Measurement devices."
documentation = "https://tektronix.github.io/tm_devices/"
homepage = "https://pypi.org/project/tm_devices/"
keywords = [
  "REST API",
  "SCPI",
  "TSP",
  "Tektronix",
  "Test & Measurement",
  "VISA"
]
license = "Apache License 2.0"
maintainers = [
  "Tektronix <opensource@tektronix.com>",
  "Nicholas Felt <nicholas.felt@tektronix.com>"
]
name = "tm_devices"
readme = "README.rst"
repository = "https://github.com/tektronix/tm_devices"
version = "1.2.3"

[tool.poetry.dependencies]
gpib-ctypes = ">=0.3.0"
libusb-package = ">=1.0.26.0,!=1.0.26.2"  # 1.0.26.2 doesn't work with Python 3.12
packaging = ">=21.3"
psutil = ">=5.9.2"
pyserial = ">=3.5"
python = "^3.8"  # This is the main Python version requirement
python-dateutil = ">=2.8.2"
pyusb = ">=1.2.1"
pyvicp = ">=1.1.0"
pyvisa = ">=1.12.0"
pyvisa-py = ">=0.5.3"
pyvisa-sim = ">=0.4.0"
pyyaml = ">=6.0"
requests = ">=2.28.1"
tomli = ">=2.0.1"
tomli-w = ">=1.0.0"
traceback-with-variables = ">=2.0.4"
typing-extensions = ">=4.10.0"
urllib3 = ">=2.0"
zeroconf = ">=0.54.0"

# Development dependencies
[tool.poetry.group.dev.dependencies]
coverage = {extras = ["toml"], version = ">=7.2.2"}
coverage-conditional-plugin = ">=0.9.0"
docformatter = {extras = ["tomli"], version = "1.7.5"}  # Update this by running scripts/update_development_dependencies.py
flask = ">=2.2.2"
graphviz = ">=0.20.1"
http-server-mock = ">=1.7"
myst-parser = ">=0.19.1"
pip = ">=22.0"
poetry = ">=1.8.0"
pre-commit = ">=2.20.0"
pre-commit-update = ">=0.1.3"
pylint = {extras = ["spelling"], version = "3.1.0"}  # Update this by running scripts/update_development_dependencies.py
pyright = "1.1.356"  # Update this by running scripts/update_development_dependencies.py
pyroma = ">=4.2"
pytest = ">=7.1.2"
pytest-cov = ">=3.0.0"
pytest-github-report = ">=0.0.1"
pytest-html = ">=4.0"
pytest-order = ">=1.0.1"
pytest-profiling = ">=1.7.0"
python-semantic-release = ">=8.5.1"
ruff = "0.3.5"  # Update this by running scripts/update_development_dependencies.py
safety = ">=2.1.1"
sphinx-autoapi = ">=2.0.0"
sphinx-copybutton = ">=0.5.1"
sphinx-rtd-theme = ">=1.0.0"
sphinx-tippy = ">=0.4.1"
sphinx-togglebutton = ">=0.3.2"
sphinxcontrib-mermaid = ">=0.7.1"
toml-sort = ">=0.23.0"
tox = ">=4.0"
tox-gh-actions = ">=3.1.0"
twine = ">=4.0.2"
types-python-dateutil = ">=2.8.19"
types-pyyaml = ">=6.0"
types-requests = ">=2.28.8"
urllib3 = ">=1.26.14"
wheel = ">=0.37.1"
yamlfix = ">=1.16.0"

[tool.poetry.scripts]
list-visa-resources = "tm_devices:print_available_visa_devices"

[tool.poetry.urls]
"Bug Tracker" = "https://github.com/tektronix/tm_devices/issues"
"Changelog" = "https://github.com/tektronix/tm_devices/blob/main/CHANGELOG.md"

[tool.pre-commit-update]
keep = []
verbose = true

[tool.pylint.basic]
good-names = ["_"]

[tool.pylint.design]
max-args = 7
max-parents = 20

[tool.pylint.main]
fail-under = 10.0
ignore-patterns = [
  "^\\.#",
  "^\\..*_cache",
  "^\\.docs.*",
  "^\\.env.*",
  "^\\.idea",
  "^\\.results.*",
  "^\\.tox",
  "^\\.venv.*",
  "^\\.vscode",
  "^temp_.*\\..*"
]
jobs = 0
load-plugins = """
pylint.extensions.check_elif,
pylint.extensions.code_style,
pylint.extensions.comparison_placement,
pylint.extensions.consider_refactoring_into_while_condition,
pylint.extensions.dict_init_mutate,
pylint.extensions.docparams,
pylint.extensions.docstyle,
pylint.extensions.dunder,
pylint.extensions.eq_without_hash,
pylint.extensions.for_any_all,
pylint.extensions.no_self_use,
pylint.extensions.overlapping_exceptions,
pylint.extensions.private_import,
pylint.extensions.set_membership,
pylint.extensions.typing,
pylint.extensions.while_used
"""
py-version = "3.8"
recursive = true

[tool.pylint."messages control"]
enable = ["all"]
disable = [
  "broad-exception-caught",  # caught by ruff
  "duplicate-code",
  "fixme",  # caught by ruff
  "global-statement",  # caught by ruff
  "line-too-long",  # caught by ruff
  "locally-disabled",  # allowed
  "missing-class-docstring",  # caught by ruff
  "missing-module-docstring",  # caught by ruff
  "no-member",  # caught by pyright
  "protected-access",  # caught by ruff
  "raise-missing-from",  # caught by ruff
  "redefined-builtin",  # caught by ruff
  "suppressed-message",  # allowed
  "too-many-arguments",  # caught by ruff
  "too-many-branches",  # caught by ruff
  "too-many-statements",  # caught by ruff
  "too-many-statements",  # caught by ruff
  "unused-argument",  # caught by ruff
  "unused-import",  # caught by ruff
  "use-implicit-booleaness-not-comparison-to-string",  # caught by ruff
  "while-used",  # using while loops in example scripts
  "wrong-import-order"  # caught by ruff
]

[tool.pylint.reports]
# Python expression which should return a score less than or equal to 10. You
# have access to the variables 'fatal', 'error', 'warning', 'refactor',
# 'convention', and 'info' which contain the number of messages in each category,
# as well as 'statement' which is the total number of statements analyzed. This
# score is used by the global evaluation report (RP0004).
evaluation = "max(0, 0 if fatal else 10.0 - ((float(5 * error + warning + refactor + convention + info) / statement) * 10))"
score = true
output-format = "text"  # colorized could be another option

[tool.pyright]
ignore = [
  "**/output_*/**",
  "temp_*.py"
]
pythonPlatform = "All"
pythonVersion = "3.8"
reportCallInDefaultInitializer = "error"
reportImplicitOverride = "none"  # this check is not needed
# TODO: turn on the check for implicit string concatenation
reportImplicitStringConcatenation = "none"  # this is allowed by this project's formatting standard
reportImportCycles = "none"  # other analysis tools catch these more effectively
reportMissingSuperCall = "none"  # this can be ignored since this would break unit tests if handled incorrectly
reportPropertyTypeMismatch = "none"  # the auto-generated properties can have mismatches
reportShadowedImports = "error"
reportUninitializedInstanceVariable = "error"
reportUnnecessaryTypeIgnoreComment = "error"
reportUnusedCallResult = "none"  # this can be ignored since this would break unit tests if handled incorrectly
strict = ["**"]
stubPath = "src"
typeCheckingMode = "strict"
useLibraryCodeForTypes = true

# Pytest configuration
[tool.pytest.ini_options]
addopts = "--order-scope=module --cov-config=pyproject.toml"
filterwarnings = [
  "ignore:'xdrlib' is deprecated:DeprecationWarning",
  "ignore::DeprecationWarning:pkg_resources",
  "ignore:GPIB library not found:UserWarning",
  "ignore:pkg_resources is deprecated:DeprecationWarning"
]
junit_family = "xunit2"
junit_logging = "all"
markers = [
  'docs',
  'order',
  'slow'
]
xfail_strict = true

[tool.rstcheck]
ignore_directives = [
  "autoapisummary"  # This is added by sphinx-autoapi
]

[tool.ruff]
line-length = 100
namespace-packages = ["examples/**", "scripts/**", "tests/**"]
src = ["docs", "examples", "scripts", "src", "tests"]
target-version = "py38"  # always generate Python 3.8 compatible code

[tool.ruff.lint]
allowed-confusables = ["¸", "×"]
fixable = [
  "F401",
  "FLY002",
  "I",
  "RUF100"
]
flake8-pytest-style = {mark-parentheses = false}
flake8-quotes = {docstring-quotes = "double"}
ignore = [
  "ANN101",  # Missing type annotation for self in method
  "ANN102",  # Missing type annotation for cls in method
  "ANN401",  # Dynamically typed expressions (typing.Any) are disallowed in *args and **kwargs
  "COM812",  # Trailing comma missing
  "EM102",  # Exception must not use an f-string literal, assign to variable first
  "FA100",  # Missing `from __future__ import annotations`, but uses ...
  "FBT",  # flake8-boolean-trap
  "FIX002",  # Line contains TO DO
  "ISC001",  # single-line-implicit-string-concatenation (handled by formatter)
  "PTH109",  # `os.getcwd()` should be replaced by `Path.cwd()`
  "PTH123",  # `open()` should be replaced by `Path.open()`
  "PTH207",  # Replace `iglob` with `Path.glob` or `Path.rglob`
  "PYI021",  # Docstrings should not be included in stubs
  "T20",  # flake8-print
  "TD002",  # Missing author in TO DO
  "TD003",  # Missing issue link on the line following this TO DO
  "TRY301",  # Abstract raise to an inner function
  "UP006",  # Use {to} instead of {from} for type annotation
  "UP007",  # Use `X | Y` for type annotations
  "UP024",  # Replace aliased errors with `OSError`
  "UP037"  # Remove quotes from type annotation
]
pydocstyle = {convention = "google"}
pylint = {max-args = 7}
# https://beta.ruff.rs/docs/rules/
select = [
  "ALL"
]
task-tags = ["FIXME", "FUTURE", "RELIC", "TODO"]

[tool.ruff.lint.isort]
force-sort-within-sections = false
known-first-party = [
  "conftest",
  "mock_server",
  "tm_devices"
]
lines-between-types = 1
order-by-type = false

[tool.ruff.lint.per-file-ignores]
"examples/**" = [
  "S101"  # Use of assert detected
]
"src/tm_devices/commands/**" = [
  "A003",  # Class attribute is shadowing a python builtin
  "ERA001",  # Found commented-out code
  "S105",  # Possible hardcoded password
  "TID252"  # Relative imports from parent modules are banned
]
"src/tm_devices/drivers/api/__init__.py" = [
  "D104"  # Missing docstring in public package
]
"src/tm_devices/drivers/api/rest_api/__init__.py" = [
  "D104"  # Missing docstring in public package
]
"src/tm_devices/drivers/pi/__init__.py" = [
  "D104"  # Missing docstring in public package
]
"tests/**" = [
  "PLC1901",  # compare-to-empty-string
  "PLR2004",  # Magic value used in comparison
  "PTH107",  # `os.remove()` should be replaced by `Path.unlink()`
  "S101"  # Use of assert detected
]
"tests/samples/golden_stubs/**" = [
  "D100",  # Missing docstring in public module
  "D101",  # Missing docstring in public class
  "D107",  # Missing docstring in `__init__`
  "PYI053"  # String and bytes literals longer than 50 characters are not permitted
]

[tool.semantic_release]
version_toml = [
  "pyproject.toml:tool.poetry.version"
]

[tool.semantic_release.changelog]
exclude_commit_patterns = []
template_dir = "python_semantic_release_templates"

[tool.semantic_release.changelog.environment]
extensions = []

[tool.semantic_release.commit_parser_options]
# These settings allow python-semantic-release to be used without triggering on any commits
allowed_tags = []
minor_tags = []
patch_tags = []

[tool.tomlsort]
all = true
in_place = true
spaces_before_inline_comment = 2
overrides."tool.poetry.*".inline_arrays = false
overrides."tool.pylint.*".table_keys = false

# Tox configuration
[tool.tox]
legacy_tox_ini = """
[tox]
requires = tox>4
isolated_build = True
envlist = py38,py39,py310,py311,py312,tests,docs,doctests
skip_missing_interpreters = True
labels =
  basic = py38,py39,py310,py311,py312,tests
  documentation = docs,doctests

[gh-actions]
python =
    3.8: py38
    3.9: py39
    3.10: py310
    3.11: py311
    3.12: py312

[testenv]
package = wheel
install_command = python -I -m pip install --upgrade --upgrade-strategy=eager {opts} {packages}
deps =
    poetry
setenv =
    DOC_PYTHON_VERSION = python3.11  # Keep this in sync with .readthedocs.yml and any CI scripts
    # Skip pre-commit checks that are explicitly performed by tox
    SKIP = ruff-format,docformatter,ruff,pylint,pyright,pyright-verifytypes,pyroma
    PYRIGHT_PYTHON_GLOBAL_NODE = False  # This will cause python-pyright to use nodeenv to install node rather than use the system node
commands_pre =
    poetry install --no-root
commands =
    !tests: safety check
    !tests: ruff format --check --diff .
    !tests: docformatter --check --diff .
    !tests: ruff check .
    !tests: pylint --report=y .
    !tests: pyright .
    !tests: pyright --verifytypes tm_devices --ignoreexternal
    !tests: pyroma .
    !tests: poetry build --output=dist_{envname}
    !tests: twine check --strict dist_{envname}/*
    !tests: pre-commit run --all-files --show-diff-on-failure
    pytest -vv -k "not test_docs" --showlocals --cov --junitxml={tox_root}/.results_{envname}/results.xml --cov-report=term --cov-report=xml:{tox_root}/.coverage_{envname}.xml --cov-report=html:{tox_root}/.results_{envname}/html --self-contained-html --html={tox_root}/.results_{envname}/results.html

[testenv:tests]
basepython = python
deps =
    -rtests/requirements.txt
passenv =
    pytest_report_title
setenv =
    pytest_github_report = true
    pytest_use_blanks = true
    GITHUB_STEP_SUMMARY = {tox_root}/.results_{envname}/github_report.md
commands_pre =

[testenv:docs]
basepython = {env:DOC_PYTHON_VERSION}
deps =
    -rdocs/requirements.txt
commands_pre =
commands =
    python -c "import shutil; shutil.rmtree('.results_{envname}', ignore_errors=True)"
    sphinx-build -b html -a -W --keep-going docs .results_{envname}/html

[testenv:doctests]
basepython = {env:DOC_PYTHON_VERSION}
deps =
    -rdocs/requirements.txt
    -rtests/requirements.txt
commands_pre =
commands =
    pytest -v -k "test_docs and not test_docs_html" --showlocals --junitxml={tox_root}/.results_{envname}/results.xml --self-contained-html --html={tox_root}/.results_{envname}/results.html
"""
